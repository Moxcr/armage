//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
namespace Armage
{
	public class PlanetProperties
	{
		public static int landTexturesUpperBounds = 19;
		public static int cliffTexturesUpperBounds = 18;
		public static int snowTexturesUpperBounds = 8;

		public Material landMaterial;
		public Shader terrainShader;

		public Texture2D landTexture;
		public Texture2D cliffTexture;
		public Texture2D snowTexture;
		public int landTextureScale;

		public float heightScaleFactor;

		public Texture2D landHeightTexture;
		public Texture2D landSubTexture;
		public Texture2D landNormalMap;

		public float radius = 20f;
		public bool applySubdivide = false;
		public bool applyHeightmap = true;
		public bool hasOcean = true;
		public bool multiTexture = false;

		public List<TerrainTexture> terrainTextures = new List<TerrainTexture>();

		public PlanetProperties(string shader, string landTex, string cliffTex, string snowTex, string landHeightTex = null, string landSubTex = null, float heightScaleFactor=1.5f, int landTexScale = 1) {
			landMaterial = Resources.Load<Material> ("Materials/Terrain/Diffuse");
			terrainShader = Resources.Load<Shader> (shader);
			landTexture = Resources.Load<Texture2D> (landTex);
			if (cliffTex != null) {
				cliffTexture = Resources.Load<Texture2D> (cliffTex);
			} else {
				cliffTexture = landTexture;
			}
			if (snowTex != null) {
				snowTexture = Resources.Load<Texture2D> (snowTex);
			} else {
				snowTexture = null;
			}


			if (landHeightTex != null) {
				if (landTexture != null && landHeightTex == landTex) {
					landHeightTexture = landTexture;
				} else {
					landHeightTexture = Resources.Load<Texture2D> (landHeightTex);
				}
			}

			if (landSubTex != null) {
				if (landHeightTexture != null && landSubTex == landHeightTex) {
					landSubTexture = landHeightTexture;
				} else {
					landSubTexture = Resources.Load<Texture2D> (landSubTex);
				}
			}

			this.heightScaleFactor = heightScaleFactor;
			this.landTextureScale = landTexScale;
		}

		public void SetNormalMap(string normalMap) {
			landNormalMap = Resources.Load<Texture2D> (normalMap);
		}

		public void AddTerrainTexture(TerrainTexture terrainTexture) {
			this.terrainTextures.Add (terrainTexture);
		}

		public static string RandLandTexture(int seed) {
			System.Random rand = new System.Random(seed);
			double next = rand.NextDouble ();
			int nextItem = Mathf.RoundToInt ((float) PlanetProperties.landTexturesUpperBounds * (float) next);
			return "Textures/Terrain/Land/" + nextItem;
		}

		public static string RandCliffTexture(int seed) {
			System.Random rand = new System.Random(seed);
			double next = rand.NextDouble ();
			int nextItem = Mathf.RoundToInt ((float) PlanetProperties.cliffTexturesUpperBounds * (float) next);
			return "Textures/Terrain/Cliff/" + nextItem;
		}

		public static string RandSnowTexture(int seed) {
			System.Random rand = new System.Random(seed);
			double next = rand.NextDouble ();
			if (next < 0.6) {
				int nextItem = Mathf.RoundToInt ((float) PlanetProperties.snowTexturesUpperBounds * (float) next);
				return "Textures/Terrain/Snow/" + nextItem;
			} else {
				return null;
			}
		}

		public static PlanetProperties GetRand(int seed) {
			System.Random rand = new System.Random(seed);
			UnityEngine.Random.seed = rand.Next ();

			PlanetProperties pp = new PlanetProperties("Shaders/TriPlanar",
			                                       PlanetProperties.RandLandTexture(rand.Next ()),
			                                       PlanetProperties.RandCliffTexture(rand.Next ()),
			                                       PlanetProperties.RandSnowTexture(rand.Next ()),
			                                       null,
			                                       null,
			                                       UnityEngine.Random.Range(0.6f, 1.5f),
			                                           UnityEngine.Random.Range (6, 8));
			pp.radius = UnityEngine.Random.Range (10f, 50f);
			return pp;
		}
	}
}

