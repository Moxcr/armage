//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
namespace Armage
{
	public static class PlanetGen
	{
		public static SphereProperties defaultLandSphereProps = new SphereProperties(20f, 128, 64);
		public static SphereProperties defaultOceanSphereProps = new SphereProperties(20f, 32, 16);
		public static OceanProperties defaultOceanProps = new OceanProperties("Textures/Terrain/Ocean", 
                                                                  new Vector2(10, 10), 
                                                                  "Materials/Terrain/Ocean",
		                                                          new Vector3(1.06f,1.06f,1.06f));

		public static void GenerateStarSystem() {
			if (Stage.currentStage == null || Stage.currentStage.seed == 0) {
				Debug.LogError("Stage must be initialized before generating star system.");
				Debug.Break();
			}

			StarSystem starSystem = Stage.currentStage.StarSystem;
			Sun sun = starSystem.transform.FindChild("Sun").GetComponent<Sun>();

			string[] names = NameGen.Generate(starSystem.numPlanets, new EnglishFeed());
			System.Random rand = new System.Random(Stage.currentStage.seed);

			for (int i = 0; i < starSystem.numPlanets; i++) {
				Planet planet = PlanetGen.GenerateRandPlanet ();

				//Add planet to Star System
				planet.gameObject.transform.SetParent(starSystem.transform);
				planet.gameObject.transform.Translate (sun.bufferSpace + (i * UnityEngine.Random.Range (6 * ((int) currPlanetProps.radius + planet.bufferSpace), 12 * ((int) currPlanetProps.radius + planet.bufferSpace))), 0, 0);
				starSystem.planets.Add (planet);

				//Create Planet Camera
				/*Camera planetCamera = (Camera) GameObject.Instantiate(Resources.Load<Camera>("Prefabs/Planet Camera"));
				planetCamera.name = "Planet Camera";
				//planetCamera.transform.SetParent (planet.transform);
				//planet.camera = planetCamera;
				PlanetCamera pc = planetCamera.GetComponent<PlanetCamera>();
				pc.target = planet.transform;*/
			}
		}

		public static Planet GenerateRandPlanet() {
			System.Random rand = new System.Random(Stage.currentStage.seed);

			//Generate Planet
			UnityEngine.Random.seed = rand.Next ();
			PlanetProperties currPlanetProps = PlanetProperties.GetRand (rand.Next ());
			currPlanetProps.applyHeightmap = false;
			currPlanetProps.applySubdivide = false;
			float oceanChance = i == 0 ? 0.7f : 0.4f;
			Planet planet = PlanetGen.GeneratePlanet(names[i], currPlanetProps, (rand.NextDouble () < oceanChance ? PlanetGen.defaultOceanProps : null));
			float subTerScale = UnityEngine.Random.Range (0.6f, 1.5f);
			PlanetGen.GenerateSubTerrain(planet, 
			                             HeightmapProperties.GetRand(rand.Next ()),
			                             subTerScale,
			                             rand.Next ());
		}

		public static Planet GeneratePlanet(string planetName, PlanetProperties planetProps, OceanProperties oceanProps = null) {
			SphereProperties sp = PlanetGen.defaultLandSphereProps.shallowClone();
			sp.radius = planetProps.radius;

			GameObject sphere = SphereGenerator.GenPrimitive (sp);
			Planet planet = sphere.AddComponent<Planet>();
			planet.SetLand (sphere);
			planet.SetName (planetName);

			if (oceanProps != null) {
				SphereProperties osp = PlanetGen.defaultOceanSphereProps.shallowClone();
				osp.radius = planetProps.radius;
				GameObject ocean = PlanetGen.CreateOcean (sphere, osp, oceanProps);
				planet.SetOcean (ocean);
			}

			PlanetGen.ApplyMaterial(sphere, planetProps);
			if (planetProps.applySubdivide) {
				SphereGenerator.Subdivide (sphere, planetProps.landSubTexture, 1);
			}
			if (planetProps.applyHeightmap) {
				SphereGenerator.ApplyHeightMap(sphere, planetProps.heightScaleFactor, planetProps.landHeightTexture);
			}

			return planet;
		}

		public static void ApplyMaterial(GameObject sphere, PlanetProperties planetProps) {
			MeshRenderer renderer = sphere.GetComponent<MeshRenderer>();
			if (!renderer) {
				renderer = sphere.AddComponent<MeshRenderer>();
			}
			
			renderer.material = (Material) GameObject.Instantiate (planetProps.landMaterial);
			renderer.material.shader = (Shader) GameObject.Instantiate (planetProps.terrainShader);

			renderer.material.SetTexture ("_Side", planetProps.cliffTexture);
			renderer.material.SetFloat("_SideScale", (float) planetProps.landTextureScale);
			renderer.material.SetTexture ("_Top", planetProps.landTexture);
			renderer.material.SetFloat("_TopScale", (float) planetProps.landTextureScale);

			if (planetProps.landNormalMap != null) {
				//TODO:  If I ever add normals, will have to do them the tri-planar way instead.
				//renderer.material.SetTexture("Normalmap", planetProps.landNormalMap);
			}

			/*if (planetProps.multiTexture) {
				int newLen = renderer.materials.Length + 1;
				Material[] matList = new Material[newLen];
				renderer.materials.CopyTo(matList, 0);
				Material copiedMat = (Material) GameObject.Instantiate (planetProps.landMaterial);
				copiedMat.color = new Color(renderer.material.color.r, renderer.material.color.b, renderer.material.color.g, 0.33f);
				renderer.material.color = new Color(renderer.material.color.r, renderer.material.color.g, renderer.material.color.b, 0.66f);
				matList[newLen - 1] = copiedMat;
				matList[newLen - 1].mainTexture = planetProps.landTexture;
				if (planetProps.landTextureScale > 1) {
					matList[newLen - 1].mainTextureScale = new Vector2(1f, 1f);
				} else {
					matList[newLen - 1].mainTextureScale = new Vector2(4f, 4f);
				}

				renderer.materials = matList;
			}*/
		}

		public static GameObject CreateOcean(GameObject sphere, SphereProperties sphereProps, OceanProperties oceanProps) {
			GameObject oceanObj = SphereGenerator.GenPrimitive (sphereProps);
			MeshRenderer r = oceanObj.AddComponent<MeshRenderer>();
			r.material = oceanProps.material;
			r.material.mainTexture = oceanProps.texture;
			r.material.mainTextureScale = oceanProps.textureScale;
			oceanObj.transform.position = sphere.transform.position;
			oceanObj.transform.localScale = oceanProps.scale;
			
			return oceanObj;
		}

		public static void GenerateSubTerrain(Planet planet, HeightmapProperties heightProps, float scale, int seed, float cutoff = 0f) {
			GameObject sphere = planet.land.gameObject;

			System.Random rand = new System.Random(seed);
			UnityEngine.Random.seed = rand.Next ();

			HeightMap terrainMap = HeightMapGen.GenBasicTerrainMap(heightProps, rand.Next());

			int subTimes = UnityEngine.Random.Range (8, 16);
			for (int i = 0; i < subTimes; i++) {
				UnityEngine.Random.seed = rand.Next ();
				string blendMode = HeightmapProperties.heightBlendModes[UnityEngine.Random.Range (0, 
				                                                             HeightmapProperties.heightBlendModes.Length - 1)];
				float blendAmount = 1f + UnityEngine.Random.value;
				int posX = UnityEngine.Random.Range (0, Mathf.Abs (terrainMap.Heights.GetLength(0) - 1));
				int posY = UnityEngine.Random.Range (0, Mathf.Abs (terrainMap.Heights.GetLength(1) - 1));

				int nx = rand.Next ();
				HeightmapProperties submap = HeightmapProperties.GetRandSub(nx);
				HeightMap subTerrainMap = HeightMapGen.GenBasicTerrainMap(submap, rand.Next());
				terrainMap.Blend(subTerrainMap, blendMode, posX, posY, blendAmount);
			}

			terrainMap.AntiAlias ();
			terrainMap.Smoothen ();
			terrainMap.MendSeams ();

			SphereGenerator.ApplyHeightMap(sphere, scale, terrainMap.Heights, cutoff);
		}

		public static void ApplyTerrainTextures(Planet planet, TerrainTexture[] textures) {
			//MeshFilter filter = sphere.GetComponent<MeshFilter>();
			//Mesh mesh = filter.mesh;

			//foreach (TerrainTexture t in textures) {
				//planet.land.renderer.material = (Material) GameObject.Instantiate (planetProps.landMaterial);
			//}
		}
	}
}

