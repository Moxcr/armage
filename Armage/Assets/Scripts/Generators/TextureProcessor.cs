//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;

namespace Armage
{
	public static class TextureProcessor
	{
		/*public Color[] gaussBlur_1 (Color[] scl, tcl, width, height, radius) {
			int rs = Math.ceil(radius * 2.57);     // significant radius
			for(int i=0; i<height; i++) {
				for(int j=0; j<width; j++) {
					int val = 0, wsum = 0;
					for(int iy = i-rs; iy<i+rs+1; iy++) {
						for(int ix = j-rs; ix<j+rs+1; ix++) {
							int x = Math.min(w-1, Math.max(0, ix));
							int y = Math.min(h-1, Math.max(0, iy));
							 var dsq = (ix-j)*(ix-j)+(iy-i)*(iy-i);
							 var wght = Math.exp( -dsq / (2*r*r) ) / (Math.PI*2*r*r);
							val += scl[y*w+x] * wght;  wsum += wght;
						}
					}
					tcl[i*w+j] = Math.round(val/wsum);            
				}
			}
		}*/

		public static Texture2D Blur(Texture2D image, int blurSize)
		{
			Color[] input = image.GetPixels();
			Color[] output = new Color[input.Length];

			for (int xx = 0; xx < image.width; xx++)
			{
				for (int yy = 0; yy < image.height; yy++)
				{
					float avgR = 0.0f, avgG = 0.0f, avgB = 0.0f;
					int blurPixelCount = 0;
					for (int x = xx; (x < xx + blurSize && x < image.width); x++)
					{
						for (int y = yy; (y < yy + blurSize && y < image.height); y++)
						{
							Color pixel = input[image.width * x + y];
							avgR += pixel.r;
							avgG += pixel.g;
							avgB += pixel.b;
							blurPixelCount++;
						}
					}
					avgR = avgR / blurPixelCount;
					avgG = avgG / blurPixelCount;
					avgB = avgB / blurPixelCount;
					for (int x = xx; x < xx + blurSize && x < image.width; x++) {
						for (int y = yy; y < yy + blurSize && y < image.height; y++) {
							output[image.width * x + y] = new Color(avgR, avgG, avgB);
						}
					}
				}
			}

			Texture2D outputTex = new Texture2D(image.width, image.height);
			outputTex.SetPixels (output);
			outputTex.Apply();
			return outputTex;
		}

		public static Texture2D Contrast(Texture2D image, float threshold = 1.0f)
		{
			Color[] input = image.GetPixels();
			Color[] output = new Color[input.Length];

			for (int i = 0; i < input.Length; i++) {
				Color pixel = input[i];
				output[i] = pixel;
				output[i].r = input[i].r * threshold;
			}
			
			Texture2D outputTex = new Texture2D(image.width, image.height);
			outputTex.SetPixels (output);
			outputTex.Apply();
			return outputTex;
		}
	}
}

